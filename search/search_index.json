{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FactryFlow","text":"<p>Welcome to the official documentation for the Production Scheduler Software. This guide aims to provide an in-depth understanding of the software, ensuring that users can effectively plan, manage, and optimize their production tasks.</p>"},{"location":"#introduction","title":"Introduction","text":"<p>The Production Scheduler Software is an innovative solution designed for modern manufacturing environments, bridging the gap between planning and execution. It leverages a comprehensive set of tools to manage jobs, tasks, resources, and dependencies. Whether you're managing a small workshop or a large-scale manufacturing facility, this software provides the flexibility and precision required to keep production running smoothly.</p>"},{"location":"#key-features","title":"Key Features:","text":"<ul> <li>Intuitive Job Management: Easily define, modify, and track jobs.</li> <li>Advanced Task Scheduling: Manage task relationships, resources, and timelines.</li> <li>Resource Allocation: Group and allocate resources efficiently with weekly shift templates.</li> <li>Dependency Tracking: Monitor and manage task dependencies and exceptions.</li> <li>Operational Flexibility: Handle operational exceptions and adjust resources as needed.</li> </ul>"},{"location":"#software-overview","title":"Software Overview","text":"<p>Jobs: At the heart of the system lies the 'Job' entity. Each job, identified by a unique ID, encompasses a series of tasks and their associated dependencies. Every job can be detailed with attributes like due dates, customer details, and notes.</p> <p>Tasks: Tasks represent individual production activities. They can be associated with one another (predecessor and successor relationships), and they require specific resources. Tasks also have defined setup times, run times per unit, and teardown times, ensuring accurate scheduling.</p> <p>Resources &amp; Resource Groups: Resources are the workforce or machinery required to complete tasks. These can be grouped into 'Resource Groups' for easier management and allocation.</p> <p>Dependencies: Dependencies can be thought of as prerequisites. They come in various types and can be associated with both tasks and jobs. By effectively tracking dependencies, the software ensures that tasks or jobs do not commence until all necessary conditions are met.</p> <p>Operational Exceptions: The software is built with real-world challenges in mind. It provides tools to handle operational exceptions that might affect resource availability or task execution.</p>"},{"location":"dependcy-types/","title":"Dependency Types","text":"<p>When scheduling production, it's crucial to recognize various dependency types that can influence the process. By understanding these dependencies, users can ensure a smooth workflow, minimal interruptions, and optimized resource allocation. Moreover, in our production scheduling software, users have the capability to add dependency constraints directly to tasks and jobs, ensuring that all requirements are met before proceeding. Below, we've outlined the primary dependency types and provided examples for clarity.</p>"},{"location":"dependcy-types/#1-materials-components","title":"1. Materials &amp; Components","text":"<p>Description: This category represents the fundamental raw materials, parts, or components required for the manufacturing process. The specific materials can range widely based on the product.</p> <p>Examples: - Specific plastic resin needed for toy manufacturing. - Brake assemblies vital for car production.</p>"},{"location":"dependcy-types/#2-machinery-equipment","title":"2. Machinery &amp; Equipment","text":"<p>Description: Critical machinery or equipment necessary for various tasks are highlighted in this category. The state of this equipment, whether it's operational, requires calibration, or installation, can impact production timelines.</p> <p>Examples: - A downed CNC machine that halts a production line. - A malfunctioning conveyor belt requiring immediate repairs.</p>"},{"location":"dependcy-types/#3-technical-specifications","title":"3. Technical Specifications","text":"<p>Description: Before kick-starting a manufacturing process, there are essential technical details, drawings, or design specifications to be considered. These provide the blueprint for the manufacturing process.</p> <p>Examples: - CAD drawings necessary for launching a new product line. - Design specifications needed to create a new mold.</p>"},{"location":"dependcy-types/#4-quality-compliance","title":"4. Quality &amp; Compliance","text":"<p>Description: Quality assurance and regulatory compliance form this category. It signifies both the internal quality checks a product must undergo and the external regulations and certifications a process or product must adhere to.</p> <p>Examples: - A product batch pending a quality control inspection. - A new manufacturing process that needs an environmental safety certification before it starts.</p>"},{"location":"dependcy-types/#5-logistics-suppliers","title":"5. Logistics &amp; Suppliers","text":"<p>Description: Any challenges or dependencies related to the supply chain fall under this category. From transportation hitches to supplier delays, these logistical concerns can influence the scheduling timeline.</p> <p>Examples: - Production delay due to a key supplier facing issues with their own supply chain. - Raw materials held up in customs, causing a production hold.</p> <p>By embedding these dependencies as constraints in tasks and jobs, our software allows for a proactive approach to potential disruptions. This not only provides better visibility but also ensures better resource allocation, more accurate timelines, and a more efficient production process overall.</p>"},{"location":"core-concepts/assignment-rules/","title":"Assignment Rules","text":"<p>Assignment Rules in FactryFlow help you automatically assign the right resources to tasks. You set up these rules once, and then the software uses them to make sure each task gets the resources it needs.</p>"},{"location":"core-concepts/assignment-rules/#how-do-they-work","title":"How Do They Work?","text":"<p>Each Assignment Rule uses a resource group as its starting point. You tell the rule how many resources you need from that group for a task. If there are more resources available than needed, the rule picks the most available ones.</p>"},{"location":"core-concepts/assignment-rules/#setting-criteria","title":"Setting Criteria","text":"<p>You can make each Assignment Rule more specific by adding criteria. These criteria act like filters. They tell the rule which tasks it should focus on.</p>"},{"location":"core-concepts/assignment-rules/#example-using-task-type","title":"Example: Using 'Task Type'","text":"<p>Suppose you create an Assignment Rule and for this rule, you select a resource group of CNC machines. You also specify that you need 2 machines for each task that matches the rule. Then, you set the criteria so that the 'Task Type' must be \"Machining.\" This means the rule will only activate for tasks labeled as \"Machining.\"</p> <p>When a task comes up that is of the type \"Machining,\" this rule will automatically kick in. It will look at the chosen resource group of CNC machines and pick the two most available machines to work on this specific \"Machining\" task.</p>"},{"location":"core-concepts/assignment-rules/#what-if-more-than-one-rule-fits","title":"What If More Than One Rule Fits?","text":"<p>Sometimes, more than one rule might fit a task. Each rule has a priority number. The rule with the highest priority gets to go first and assign the resources.</p>"},{"location":"core-concepts/production-fundamentals/","title":"Production Fundamentals","text":"<p>This section delves into the core elements that make up the production process in FactryFlow. From tasks and jobs to dependencies and priorities, you'll learn how each component interacts to create a seamless workflow.</p>"},{"location":"core-concepts/production-fundamentals/#jobs","title":"Jobs","text":"<p>In FactryFlow, a \"Job\" represents a specific production order or project that needs to be completed. Each job is a collection of various tasks that contribute to the production of a particular item or set of items. Jobs can vary in complexity, from simple, single-step processes to multi-stage operations requiring various resources and tasks.</p> <p>For example, consider a job that involves producing 100 units of a metal component. This job might include tasks like cutting metal sheets, welding, and quality inspection. Each of these tasks contributes to the completion of the job and may need to be executed in a specific sequence for the job to be successful.</p>"},{"location":"core-concepts/production-fundamentals/#tasks","title":"Tasks","text":"<p>A \"Task\" is an individual operation or step that is part of a larger job. Tasks are the granular units of work to which resources are allocated. Each task has its own set of requirements, such as the type of resource needed and the time required for completion. In FactryFlow, tasks are organized using predecessors and successors to determine the order in which they should be executed.</p> <p>Continuing with our example of producing 100 units of a metal component, one of the tasks might be \"Cutting Metal Sheets.\" This task would be a predecessor to the \"Welding\" task, meaning that the cutting needs to be completed before welding can begin.</p>"},{"location":"core-concepts/production-fundamentals/#priority-based-scheduling","title":"Priority-Based Scheduling","text":"<p>In FactryFlow, each job is assigned a priority level. This priority determines the order in which jobs are scheduled and executed. Higher-priority jobs are placed at the front of the queue, ensuring they get the resources and attention they need before lower-priority jobs. This allows you to focus on what's most important and ensures that critical jobs are completed on time.</p>"},{"location":"core-concepts/production-fundamentals/#dependencies","title":"Dependencies","text":"<p>In FactryFlow, \"Dependencies\" are external factors or prerequisites that can affect the scheduling and completion of jobs and tasks. Unlike task predecessors and successors, which dictate the internal sequence of tasks, dependencies are external conditions that must be met. These could include the delivery of raw materials needed for a task or the completion of technical drawings before manufacturing can commence.</p> <p>For instance, the task of \"Welding\" in our example job might have a dependency on the delivery of specialized welding rods. Another dependency could be the completion of technical drawings before any manufacturing task can begin. These dependencies are crucial to account for in your production planning, as they can significantly impact your schedule.</p>"},{"location":"core-concepts/resource-management/","title":"Resource Management","text":"<p>Understanding your resources is the first step in making your production work well. This section explains the basics of how to manage your machines and staff in FactryFlow.</p>"},{"location":"core-concepts/resource-management/#resources","title":"Resources","text":"<p>In FactryFlow, a \"Resource\" is any physical entity that contributes to the production process. This could be a piece of machinery like a CNC machine or a skilled laborer. Resources are the fundamental building blocks of your production environment. Understanding how to manage them effectively is the first step in optimizing your operations.</p> <p>For example, consider a factory that specializes in metal fabrication. In this setting, a CNC machine that cuts metal sheets would be considered a resource. Similarly, the operator who runs the machine is also a resource. Both are essential for the task of cutting metal sheets, which in turn is part of a larger job\u2014say, producing 100 units of a particular metal component.</p>"},{"location":"core-concepts/resource-management/#resource-groups","title":"Resource Groups","text":"<p>Organizing your individual resources into \"Resource Groups\" allows for more efficient management and easier scheduling. For instance, you could have a resource group named \"Machining\" that includes all your CNC machines, lathes, and milling machines. Another group could be \"Assembly,\" which includes workstations and personnel responsible for assembling finished parts.</p> <p>Using the same metal fabrication factory as an example, all CNC machines could be grouped under a \"Machining\" resource group. This allows the production manager to easily allocate all machining-related tasks to this group, thereby streamlining the scheduling process.</p>"},{"location":"core-concepts/resource-management/#weekly-shift-templates","title":"Weekly Shift Templates","text":"<p>Weekly Shift Templates in FactryFlow define the availability of each individual resource for every day of the week. For example, you could set up a shift template that allocates a particular CNC machine only for the morning shift from 9 AM to 1 PM. This feature is crucial for effective scheduling as it ensures that tasks are only allocated to resources when they are available.</p> <p>In a practical scenario, a specific CNC machine could be set to operate only during the first shift, which runs from 6 AM to 2 PM. This ensures that all tasks requiring this machine are scheduled within this timeframe, making optimal use of the available resource.</p>"},{"location":"core-concepts/resource-management/#operational-exceptions","title":"Operational Exceptions","text":"<p>Operational Exceptions in FactryFlow account for both unexpected and planned events that affect resource availability. This could range from a machine breakdown to scheduled maintenance or planned leaves taken by staff. Knowing how to manage these exceptions is crucial for maintaining a smooth production schedule.</p> <p>For example, if a CNC machine in the \"Machining\" group is scheduled for maintenance, it would be marked as an operational exception for the duration of the maintenance period. This alerts the system and the production manager that the machine is not available, allowing for the reallocation of tasks to other available resources, thereby minimizing disruptions.</p>"},{"location":"technical-documentation/api-style-guide/","title":"API Design Style Guide","text":"<ol> <li> <p>Resource Naming:</p> <ul> <li>Use plural nouns for resource names.<ul> <li>Good: <code>GET /users</code>, <code>POST /orders</code></li> <li>Avoid: <code>GET /user</code>, <code>POST /order</code></li> </ul> </li> <li>Avoid using verbs in the endpoint names. Rely on HTTP methods to indicate the action.<ul> <li>Good: <code>GET /users</code> (to retrieve users)</li> <li>Avoid: <code>GET /get-users</code> or <code>POST /create-user</code></li> </ul> </li> </ul> </li> <li> <p>HTTP Methods:</p> <ul> <li>CREATE: Use <code>POST</code>.</li> <li>READ: Use <code>GET</code>.</li> <li>UPDATE: Use <code>PUT</code> (full update) or <code>PATCH</code> (partial update).</li> <li>DELETE: Use <code>DELETE</code>.</li> </ul> </li> <li> <p>URL Structure:</p> <ul> <li>Keep URLs simple and intuitive.</li> <li>Use kebab-case for multi-word resource names: <code>GET /order-items</code>.</li> <li>Nest resources for relations: <code>GET /users/{id}/orders</code>.</li> </ul> </li> <li> <p>Versioning:</p> <ul> <li>Include version in the URL: <code>/v1/users</code>.</li> </ul> </li> <li> <p>Filters, Sorting, and Pagination:</p> <ul> <li>Use query parameters.<ul> <li>Filter: <code>/products?category=electronics</code></li> <li>Sort: <code>/products?sort=price-asc</code></li> <li>Paginate: <code>/products?page=2&amp;limit=20</code></li> </ul> </li> </ul> </li> <li> <p>Status Codes:</p> <ul> <li>Use standard HTTP status codes.<ul> <li>200: OK</li> <li>201: Created</li> <li>400: Bad Request</li> <li>404: Not Found</li> <li>500: Internal Server Error</li> </ul> </li> </ul> </li> <li> <p>Error Handling:</p> <ul> <li>Provide clear error messages in a consistent format.<ul> <li>Example: <code>{\"error\": \"User not found\", \"code\": 404}</code></li> </ul> </li> </ul> </li> <li> <p>Consistency:</p> <ul> <li>Maintain a consistent structure for API endpoints, responses, and payloads.</li> </ul> </li> <li> <p>Documentation:</p> <ul> <li>Clearly document all endpoints, request/response formats, and potential error messages.</li> </ul> </li> </ol>"},{"location":"technical-documentation/architecture/","title":"FactryFlow Software Architecture","text":"<p>FactryFlow is a production scheduling software designed to optimize and streamline the production process. The software architecture is modular and consists of several key components, as illustrated in the diagram below:</p> <pre><code>graph TD\n    subgraph FactryFlow\n        A[Frontend: React]\n        B[factryflow: Django]\n        C[Microservice: Production Scheduling Engine]\n        C --&gt;|Uses| D[Python Module: PlanBee]\n    end\n    A --&gt;|API| B\n    B --&gt;|API| C</code></pre>"},{"location":"technical-documentation/architecture/#components","title":"Components","text":"<ol> <li> <p>Frontend (React): This is the user interface of FactryFlow, built using the React framework. It provides users with an interactive platform to manage and view production schedules.</p> </li> <li> <p>factryflow (Django): The factryflow is developed using the Django framework. It serves as the bridge between the frontend and the production scheduling engine, processing user requests and managing data.</p> </li> <li> <p>Microservice (Production Scheduling Engine): This is the heart of FactryFlow. It's responsible for the actual scheduling logic and optimization. The engine utilizes the PlanBee Python module to execute its scheduling algorithms.</p> </li> <li> <p>PlanBee Python Module: An integral module that powers the scheduling engine with its algorithms.</p> </li> </ol>"},{"location":"technical-documentation/architecture/#communication","title":"Communication","text":"<ul> <li> <p>The Frontend communicates with the factryflow using an API, ensuring a seamless flow of data and requests.</p> </li> <li> <p>The factryflow also communicates with the Production Scheduling Engine through an API, sending scheduling parameters and receiving optimized schedules in return.</p> </li> </ul> <p>This modular architecture ensures scalability, maintainability, and efficient performance, making FactryFlow a robust solution for production scheduling needs.</p>"},{"location":"technical-documentation/database-naming-conventions/","title":"Database Naming Convention Style Guide","text":"<p>In the realm of database design, clarity and consistency are paramount. Adhering to a clear set of naming conventions makes your database both easier to understand and more maintainable. Here's a concise style guide for your database naming.</p>"},{"location":"technical-documentation/database-naming-conventions/#key-naming-conventions","title":"Key Naming Conventions","text":"<p>Avoid Quotes. Use names like <code>first_name</code> or <code>all_employees</code> instead of <code>\"FirstName\"</code> or <code>\"All Employees\"</code>.</p> <p>Lowercase Only. Stick to lowercase letters for identifiers, e.g., <code>first_name</code> and <code>team_member</code>.</p> <p>No Data Type Names. Go for descriptive names instead of data types. Instead of <code>timestamp</code> or <code>text</code>, use terms like <code>creation_date</code> or <code>description</code>.</p> <p>Underscores for Spacing. Use underscores to separate words in an identifier, like <code>word_count</code> or <code>team_member_id</code>.</p> <p>Full Words, Not Abbreviations. Always prioritize clarity. Instead of <code>mid_nm</code>, use <code>middle_name</code>.</p> <p>Exceptions to Abbreviations. Use abbreviations only when they are widely accepted, such as <code>i18n</code> for \"internationalization\".</p> <p>Steer Clear of Reserved Words. To avoid conflicts, don't use terms like <code>user</code>, <code>table</code>, or <code>lock</code>.</p> <p>Boolean Fields. Start boolean fields with prefixes like <code>is_</code>, <code>has_</code>, <code>can_</code>, or <code>should_</code> to clearly indicate a binary condition. For instance, <code>is_active</code>, <code>has_access</code>, or <code>can_edit</code>.</p>"},{"location":"technical-documentation/database-naming-conventions/#relation-naming","title":"Relation Naming","text":"<p>Singular Names for Tables and Views. Use singular terms like <code>team</code> instead of plurals such as <code>teams</code>.</p> <p>Primary Keys. Typically, use <code>id</code> for single-column primary keys.</p> <p>Foreign Keys. Combine the referenced table's name and the field names. If a <code>team_member</code> references a <code>team</code>, the foreign key should be <code>team_id</code>.</p> <p>Remember, clarity and consistency are paramount when designing and naming your database elements.</p>"},{"location":"technical-documentation/database-schema/","title":"Database Schema","text":"<p>All tables will have the following metadata fields:</p> data_type field_name datetime updated_at boolean is_active boolean is_deleted datetime deleted_at"},{"location":"technical-documentation/database-schema/#assignment_rule","title":"<code>assignment_rule</code>","text":"<p>Description: Stores the rules for assignments, including their priority and resource count.</p> data_type field_name constraints default relationships comments int id PK string name NOT NULL 'N/A' string description 'N/A' int priority int resource_count 1 bool use_all_resources false"},{"location":"technical-documentation/database-schema/#assignment_rule_criteria","title":"<code>assignment_rule_criteria</code>","text":"<p>Description: Defines the criteria for each assignment rule.</p> data_type field_name constraints default relationships comments int id PK int parent_id NULL Parent criteria ID if any string field NOT NULL 'N/A' enum operator 'equals' string value 'N/A' int assignment_rule_id FK <code>assignment_rule</code>"},{"location":"technical-documentation/database-schema/#assignment_rule_resource_group","title":"<code>assignment_rule_resource_group</code>","text":"<p>Description: Links assignment rules to resource groups.</p> data_type field_name constraints default relationships comments int assigment_rule_id PK, FK <code>assignment_rule</code> int resource_group_id PK, FK <code>resource_group</code>"},{"location":"technical-documentation/database-schema/#dependency","title":"<code>dependency</code>","text":"<p>Description: Manages external dependencies for tasks and jobs.</p> data_type field_name constraints default relationships comments int id PK string external_id 'N/A' External Identifier for the dependency string name 'N/A' int dependency_status_id FK <code>dependency_status</code> int dependency_type_id FK <code>dependency_type</code> datetime expected_close_datetime Expected closure date/time for the dependency datetime actual_close_datetime Actual closure date/time for the dependency string notes 'N/A' Additional notes or comments about the dependency"},{"location":"technical-documentation/database-schema/#dependency_status","title":"<code>dependency_status</code>","text":"<p>Description: Lists possible statuses for dependencies.</p> data_type field_name constraints default relationships comments int id PK string name 'N/A'"},{"location":"technical-documentation/database-schema/#dependency_type","title":"<code>dependency_type</code>","text":"<p>Description: Categorizes dependencies into types.</p> data_type field_name constraints default relationships comments int id PK string name 'N/A'"},{"location":"technical-documentation/database-schema/#job","title":"<code>job</code>","text":"<p>Description: Represents jobs in the production schedule.</p> data_type field_name constraints default relationships comments int id PK string name 'N/A' string description 'N/A' string customer 'N/A' Customer associated with the job date due_date Due date for the job completion int priority Priority of the job timestamp planned_start_datetime Start datetime planned by schedule-run timestamp planned_end_datetime End datetime planned by schedule-run string external_id 'N/A' string notes 'N/A' int job_status_id FK <code>job_status</code> int job_type_id FK <code>job_type</code>"},{"location":"technical-documentation/database-schema/#job_dependency","title":"<code>job_dependency</code>","text":"<p>Description: Links jobs to their dependencies.</p> data_type field_name constraints default relationships comments int job_id PK, FK <code>job</code> int dependency_id PK, FK <code>dependency</code>"},{"location":"technical-documentation/database-schema/#job_status","title":"<code>job_status</code>","text":"<p>Description: Lists possible statuses for jobs.</p> data_type field_name constraints default relationships comments int id PK string name 'N/A'"},{"location":"technical-documentation/database-schema/#job_type","title":"<code>job_type</code>","text":"<p>Description: Categorizes jobs into different types.</p> data_type field_name constraints default relationships comments int id PK string name 'N/A'"},{"location":"technical-documentation/database-schema/#operational_exception","title":"<code>operational_exception</code>","text":"<p>Description: Manages exceptions in operations.</p> data_type field_name constraints default relationships comments int id PK string external_id 'N/A' datetime start_datetime datetime end_datetime string notes 'N/A' int weekly_shift_template_id FK <code>weekly_shift_template</code> int operational_exception_type_id FK <code>operational_exception_type</code>"},{"location":"technical-documentation/database-schema/#operational_exception_type","title":"<code>operational_exception_type</code>","text":"<p>Description: Categorizes operational exceptions into types.</p> data_type field_name constraints default relationships comments int id PK string name 'N/A'"},{"location":"technical-documentation/database-schema/#resource","title":"<code>resource</code>","text":"<p>Description: Represents resources available for tasks.</p> data_type field_name constraints default relationships comments int id PK string name 'N/A' int weekly_shift_template_id FK <code>weekly_shift_template</code>"},{"location":"technical-documentation/database-schema/#resource_group","title":"<code>resource_group</code>","text":"<p>Description: Groups resources for better management.</p> data_type field_name constraints default relationships comments int id PK string name 'N/A'"},{"location":"technical-documentation/database-schema/#schedule_run_table","title":"<code>schedule_run_table</code>","text":"<p>Description: Logs when the scheduling algorithm was run.</p> data_type field_name constraints default relationships comments int id PK datetime triggered_on Datetime when the schedule was run int schedule_status_id FK <code>schedule_run_status</code>"},{"location":"technical-documentation/database-schema/#schedule_run_status","title":"<code>schedule_run_status</code>","text":"<p>Description: Lists possible statuses for schedule runs.</p> data_type field_name constraints default relationships comments int id PK string name 'N/A'"},{"location":"technical-documentation/database-schema/#task","title":"<code>task</code>","text":"<p>Description: Represents individual tasks in the production schedule.</p> data_type field_name constraints default relationships comments int id PK string name 'N/A' int task_status FK <code>task_status</code> int quantity 1 int setup_time int run_time_per_unit int teardown_time datetime planned_start_datetime Start datetime planned by schedule-run datetime planned_end_datetime End datetime planned by schedule-run string item 'N/A' The item which is produced int task_status_id FK <code>task_status</code> int task_type_id FK <code>task_type</code> int job_id FK <code>job</code> The associated job, NULLABLE"},{"location":"technical-documentation/database-schema/#task_dependency","title":"<code>task_dependency</code>","text":"<p>Description: Links tasks to their dependencies.</p> data_type field_name constraints default relationships comments int task_id PK, FK <code>task</code> int dependency_id PK, FK <code>dependency</code>"},{"location":"technical-documentation/database-schema/#task_relationship","title":"<code>task_relationship</code>","text":"<p>Description: Defines relationships between tasks.</p> data_type field_name constraints default relationships comments int predecessor_id PK, FK <code>task</code> string successor_id PK, FK <code>task</code>"},{"location":"technical-documentation/database-schema/#task_resource_assignment","title":"<code>task_resource_assignment</code>","text":"<p>Description: Assigns resources to tasks.</p> data_type field_name constraints default relationships comments int task_id PK, FK <code>task</code> string resource_id PK, FK <code>resource</code>"},{"location":"technical-documentation/database-schema/#task_status","title":"<code>task_status</code>","text":"<p>Description: Lists possible statuses for tasks.</p> data_type field_name constraints default relationships comments int id PK string name 'N/A'"},{"location":"technical-documentation/database-schema/#task_type","title":"<code>task_type</code>","text":"<p>Description: Categorizes tasks into different types.</p> data_type field_name constraints default relationships comments int id PK string name 'N/A'"},{"location":"technical-documentation/database-schema/#user","title":"<code>user</code>","text":"<p>Description: Represents users of the production scheduling software.</p> data_type field_name constraints default relationships comments int id PK string first_name 'N/A' string last_name 'N/A' string email 'N/A' string password 'N/A' Encrypted int user_role_id FK <code>user_role</code>"},{"location":"technical-documentation/database-schema/#user_role","title":"<code>user_role</code>","text":"<p>Description: Defines roles for users.</p> data_type field_name constraints default relationships comments int id PK string name 'N/A'"},{"location":"technical-documentation/database-schema/#weekly_shift_template","title":"<code>weekly_shift_template</code>","text":"<p>Description: Templates for weekly shifts.</p> data_type field_name constraints default relationships comments int id PK string name 'N/A'"},{"location":"technical-documentation/database-schema/#weekly_shift_template_detail","title":"<code>weekly_shift_template_detail</code>","text":"<p>Description: Detailed breakdown of weekly shift templates.</p> data_type field_name constraints default relationships comments int id PK int day_of_week 0 time start_time time end_time int weekly_shift_template_id FK <code>weekly_shift_template</code>"},{"location":"technical-documentation/er-diagram/","title":"ER diagram","text":"<p>Simiplified ER Diagram</p> <pre><code>erDiagram\n    job |o--o{ task : \"consists of\"\n    job }o--o{ dependency: \"has\"\n    task }o--o{ dependency : \"has\"\n    task_resource_assignment || -- o{ task : \"has assignments\"\n    task_resource_assignment || -- o{ resource : \"is assigned to tasks\"\n    resource }o--o{ resource_group : \"part of\"\n    resource ||--|| weekly_shift_template : \"has\"\n    operational_exception ||--o{ resource: \"affects\"\n    operational_exception |o--o{ weekly_shift_template: \"can use\"\n    assignment_rule }o--o{ resource_group: \"targets\"</code></pre>"}]}